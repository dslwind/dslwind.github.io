<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>在Git Bash里使用Python</title><url>/posts/2021-08-20-git-bash-python/</url><categories/><tags><tag>Python</tag><tag>bash</tag></tags><content type="html"><![CDATA[  winpty python
缘由 在使用 Git Bash 时发现以下几个问题，
直接输入python，并不会进入交互式命令行，屏幕没有任何输出 运行 python 脚本，输出结果不会实时显示 输出中文，报编码错误 在 Cmder 里使用 git bash 运行 Python 脚本，虽然不报编码错误，但是输出中文时，中文会在行末被截断 问题解决 在经历了卸载——重装——重置——清注册表后，问题依然存在，遂在 404 小站一通搜索。
中文编码 首先是中文编码问题，得到的答案是改编码，相关代码如下：
import io import sys sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding=&#39;utf8&#39;) #改变标准输出的默认编码 以下是一些常用和中文的编码：
编码名称 用途 utf8 所有语言 gbk 简体中文 gb2312 简体中文 gb18030 简体中文 big5 繁体中文 big5hkscs 繁体中文 但是上述代码在IDLE里运行会报错，而且如果encoding没选对，输出还是乱码。
实时显示 在不安装IPython的情况下，直接在git bash里输入python -i是可以进入交互式界面的，但不建议用于运行脚本。
解决方案 在stackoverflow搜索后发现，其实这是git bash所依赖的MSYS2的锅。临时的解决方法，是在命令行前加上winpty，即运行winpty python；永久的解决的方法有两个：一是修改bash的配置，二是修改Git for Windows的安装选项。理论上，这里的方法也能用于node。
修改配置 在git bash里运行以下命令
echo &#34;alias python=&#39;winpty python.exe&#39;&#34; &gt;&gt; ~/.bash_profile 更改安装选项 在2.27.0版本后，Git for Windows提供了对“pseudo consoles”支持的选项，截图如下。但也正如截图所示，该选项不依赖winpty，是个实验性项目，且有bug。 参考链接 解决 python3 UnicodeEncodeError: &lsquo;gbk&rsquo; codec can&rsquo;t encode character &lsquo;\xXX&rsquo; in position XX Python not working in the command line of git bash   ]]></content></entry><entry><title>Selenium自动填写表单</title><url>/posts/2021-08-08-selenium/</url><categories/><tags><tag>Python</tag><tag>Selenium</tag></tags><content type="html"><![CDATA[  偷懒是人类进步的阶梯
前言 先上图
左边是 PDF 文档，右边是表单，需要从左边的文档中提取相关信息填入右边相应的文本框。
至于 PDF 的处理，下次再讲。本文专注于使用 Selenium 控制 Chrome 来填写相关字段。
单选框 首先是源语言和技术文档，以英文语言为例，在 Chrome 里，鼠标停留在“英文”前的按钮，使用“检查元素”功能，在下方的调试窗口，右键“Copy-&gt;Copy XPath”（如下图），得到“英文”对应的 XPath，使用 Selenium 提供的click()函数实现点击，代码如下。 from selenium import webdriver driver = webdriver.Chrome(options=options) driver.maximize_window() driver.get(link) # 英文、技术文档 driver.find_element_by_xpath(&#39;//*[@id=&#34;language&#34;]/label[2]/span[1]/input&#39;).click() driver.find_element_by_xpath(&#39;//*[@id=&#34;techFlag&#34;]/label[1]/span[1]/input&#39;).click() 文本框 然后是各个文本框，可以使用find_element_by_id方法定位。以“文档名”为例，使用“检查元素”功能，可以看到其id是fileName，在提取资料的文档名后（假设为file_name），使用send_keys()函数填写内容，代码如下：
#文档名 driver.find_element_by_id(&#39;fileName&#39;).send_keys(file_name) send_keys(str)的参数可以是带有转义字符的字符串，以&rsquo;\n&rsquo;为例，填入到文本框后能实现换行。
按钮 填写完所有必填文本框后，来到页面底部的“下一步”按钮，这里可以使用 XPath（很长，显得代码不够优雅）定位；由于页面上只有一个button，所以可以直接用 CSS 选择器定位button，或者使用类名定位，代码如下：
driver.find_element_by_class_name(&#39;ant-btn&#39;).click() driver.find_element_by_css_selector(&#34;button&#34;).click() 然后弹出一个对话框会提示提交成功，需要再点一次“确定”按钮，这里按 XPath 选择，代码如下：
driver.find_element_by_xpath(&#39;/html/body/div[3]/div/div[2]/div/div[2]/div/div/div[2]/button&#39;).click() 部分代码 部分代码如下，其中，由于程序顺序执行相邻指令的时间间隔很短，如果不设置time.sleep()，那么在执行下一条指令前，页面上并没有出现相应的元素，将导致程序报错。
# 英文、技术文档 driver.find_element_by_xpath(&#39;//*[@id=&#34;language&#34;]/label[2]/span[1]/input&#39;).click() driver.find_element_by_xpath(&#39;//*[@id=&#34;techFlag&#34;]/label[1]/span[1]/input&#39;).click() # 资料类型 driver.find_element_by_id(&#39;fileType&#39;).send_keys(&#39;Datasheet&#39;) #文档名 driver.find_element_by_id(&#39;fileName&#39;).send_keys(file_name) # 资料描述 driver.find_element_by_id(&#39;docDesc&#39;).send_keys(desc) # 型号 driver.find_element_by_id(&#39;pnTags_Temporary&#39;).send_keys(models) # 品类 driver.find_element_by_id(&#39;fileCategory&#39;).send_keys(category) # 应用 driver.find_element_by_id(&#39;fileApplication&#39;).send_keys(apps) # 封装 driver.find_element_by_id(&#39;filePackage&#39;).send_keys(package) # 文档生成时间 driver.find_element_by_id(&#39;fileCreateTime&#39;).send_keys(create_time) # 文档编码 driver.find_element_by_id(&#39;fileCode&#39;).send_keys(file_code) # 版本号 driver.find_element_by_id(&#39;fileVersion&#39;).send_keys(file_verion) # 下一步 driver.find_element_by_css_selector(&#34;button&#34;).click() # driver.find_element_by_class_name(&#39;ant-btn&#39;).click() # 提交成功，确定 time.sleep(3) driver.find_element_by_xpath(&#39;/html/body/div[3]/div/div[2]/div/div[2]/div/div/div[2]/button&#39;).click() # 检查超链超链页有时候会卡住，这里检测页面是否有超链状态按钮 while True: try: driver.find_element_by_xpath(&#39;//*[@id=&#34;linkCheckStatus&#34;]/label[1]/span[1]&#39;).click() break except NoSuchElementException: pass # 确定 time.sleep(3) driver.find_element_by_css_selector(&#34;button&#34;).click() time.sleep(3) # 跳转到下一资料 driver.find_element_by_xpath(&#39;/html/body/div[3]/div/div[2]/div/div[2]/div/div/div[2]/button&#39;).click() Chrome 浏览器选项 默认情况下，Selenium 会以窗口化运行 Chrome，下载路径是默认的~/Downloads目录，可以使用以下代码修改配置。
# 设置下载路径，最大化窗口 options = webdriver.ChromeOptions() prefs = { &#39;profile.default_content_settings.popups&#39;: 0, &#39;download.default_directory&#39;: &#39;C:\\Users\\username\\Downloads\\PDF&#39; } options.add_experimental_option(&#39;prefs&#39;, prefs) driver = webdriver.Chrome(options=options) driver.maximize_window() 代码调试 为了方便查看每一步的运行效果，可以使用 Jupyter Notebook。实测 IPython 在打开 Chrome 后会停在当前输入，不能输入新命令，所以 IPython 并不能用于单步。
  ]]></content></entry><entry><title>Python移除字符串中的空白字符</title><url>/posts/2021-07-08-python-remove-blank/</url><categories/><tags><tag>Python</tag></tags><content type="html"><![CDATA[  人生苦短，我用 Python
首先来看基本操作 s = &#39;a b c d&#39; t = s.replace(&#39; &#39;, &#39;&#39;) print(t) abcd 然后来个稍微有点意思的 把单词间的两个空格替换成一个空格
s = &#39;Hello world&#39; t = s.replace(&#39; &#39;, &#39; &#39;) print(t) Hello world
如果单词间有多个空格，写个循环语句也不难。
再来看个沙雕的 In [1]: print(s) Hello world In [2]: print(s.replace(&#39; &#39;, &#39; &#39;)) Hello world 什么鬼？原来s='Hello\xa0\xa0world'。 等等，\xa0又是什么？ 查阅资料，xa0就是 HTML 里的&amp;nbsp，所以这里可以使用
s.replace(u&#39;\xa0\xa0&#39;, &#39; &#39;) 进行字符替换
最后，来个简单粗暴的解决方案 def remove_blank(s): return &#39; &#39;.join(s.split())   ]]></content></entry><entry><title>UE4游戏模型导出与预览——以神舞幻想为例</title><url>/posts/2021-06-10-ue4-fod/</url><categories/><tags><tag>游戏</tag></tags><content type="html"><![CDATA[  介系里没碗过的船新版本
需要用到的软件 UE Viewer UE Viewer is a viewer for visual resources of games made with Unreal engine.
GitHub 软件主页 u4pak unpack, pack, list, check and mount Unreal Engine 4 .pak archives.
项目地址： rust-u4pak 命令行参数：
check Check consistency of a package help Prints this message or the help of the given subcommand(s) info Show summarized information of a package list List content of a package pack Create a new package unpack Unpack content of a package 可用于 MOD 文件的解包，示例：
u4pak unpack mod.pak #解包 unrealpak UE4 引擎自带的命令行工具，可用于 MOD 的解包和打包。
解包 UnrealPak.exe test.pak -extract test 打包 将下列代码保存为CreatPak.bat，将修改好的文件夹拖到此bat文件里 @if &amp;#34;%~1&amp;#34;==&amp;#34;&amp;#34; goto skip @setlocal enableextensions @pushd %~dp0 @echo &amp;#34;%~1\*.*&amp;#34; &amp;#34;..\..\..\*.*&amp;#34; &amp;gt;filelist.txt .\UnrealPak.exe &amp;#34;%~1.pak&amp;#34; -create=filelist.txt @popd @pause :skip 神舞幻想游戏素材提取和模型预览 素材提取 打开umodel.exe，选择神舞幻想游戏所在目录，以提取女主角的模型为例，找到Game/Character/100_Character目录，选择PL_1002a文件夹，右键选择Save folder packages，为争取显示贴图，还需要提 …  ]]></content></entry><entry><title>bcm43xx无线网卡驱动</title><url>/posts/2021-06-07-b43xx/</url><categories/><tags><tag>Linux</tag><tag>Ubuntu</tag></tags><content type="html"><![CDATA[  辣鸡博通
查看网卡型号 在 Linux 系统中，可以通过以下命令查看网卡型号：
lspci -vvnn | grep -A 9 Network 输出示例
03:00.0 Network controller [0280]: Broadcom Corporation BCM4331 802.11a/b/g/n [14e4:4331] (rev 02) Subsystem: Apple Inc. AirPort Extreme [106b:00d6] Control: I/O- Mem+ BusMaster+ SpecCycle- MemWINV- VGASnoop- ParErr- Stepping- SERR- FastB2B- DisINTx- Status: Cap+ 66MHz- UDF- FastB2B- ParErr- DEVSEL=fast &amp;gt;TAbort- &amp;lt;TAbort- &amp;lt;MAbort- &amp;gt;SERR- &amp;lt;PERR- INTx- Latency: 0, Cache Line Size: 256 bytes Interrupt: pin A routed to IRQ 17 Region 0: Memory at a0600000 (64-bit, non-prefetchable) [size=16K] Capabilities: &amp;lt;access denied&amp;gt; Kernel driver in use: wl 其中，CHIP ID是BCM4331，PCI-ID是14e4:4331，驱动版本wl。
b43/b43legacy 开源驱动 驱动说明 b43驱动适用于 Chip ID为 BCM 4306 (rev 03), 4311, 4312, 4318, 4322, 4331, 43224 和 43225 型号的网卡。
b43包含两部分：一是由 Ubuntu 社区维护的驱动安装脚本， firmware-b43-installer ；二是由 Linux 内核社区上游维护的 b43 驱动。
b43legacy驱动适用于Chip ID为 BCM 4301, 4306 (rev 02) 和 4309 型号的网卡。
b43legacy也由两部分组成，即由 Ubuntu …  ]]></content></entry><entry><title>Python 命名规范</title><url>/posts/2021-06-01-python-naming/</url><categories/><tags><tag>Python</tag></tags><content type="html"><![CDATA[  module_name, package_name, ClassName, method_name, ExceptionName, function_name, GLOBAL_CONSTANT_NAME, global_var_name, instance_var_name, function_parameter_name, local_var_name.
总则 函数名、变量名和文件名应该是描述性的，并避免缩写。尤其注意不要使用有歧义或不常见的缩写，也不要通过删除单词内的字母来缩写。使用.py扩展名，切忌使用连字符(-)。
Python 之父推荐的规范 Type Public Internal Packages lower_with_under Modules lower_with_under _lower_with_under Classes CapWords _CapWords Exceptions CapWords Functions lower_with_under() _lower_with_under() Global/Class Constants CAPS_WITH_UNDER _CAPS_WITH_UNDER Global/Class Variables lower_with_under _lower_with_under Instance Variables lower_with_under _lower_with_under (protected) Method Names lower_with_under() _lower_with_under() (protected) Function/Method Parameters lower_with_under Local Variables lower_with_under Google 推荐风格的英文原文 Function names, variable names, and filenames should be descriptive; eschew abbreviation. In particular, do not use abbreviations that are ambiguous or unfamiliar to readers outside your project, and do not abbreviate by deleting letters within a word.
Always use a .py filename extension. Never use dashes.
Names to Avoid single character names, except for specifically allowed cases:
counters or iterators (e.g. i, j, k, v, et al.) e as an exception identifier in try/except statements. f as a file handle in with statements Please be mindful not to abuse single-character naming. Generally speaking, descriptiveness should be proportional to the name&rsquo;s scope of visibility. For example, i might be a fine name for 5-line code block but within multiple nested scopes, it is likely too vague.
dashes (-) in any package/module name
__double_leading_and_trailing_underscore__ names (reserved by Python)
offensive terms
names that needlessly include the type of the variable (for example: id_to_name_dict)
Naming Conventions “Internal” means internal to a module, or protected or private within a class.
Prepending a single underscore (_) has some support for protecting module variables and functions (linters will flag protected member access). While prepending a double underscore (__ aka “dunder”) to an instance variable or method effectively makes the variable or method private to its class (using name mangling); we discourage its use as it impacts readability and testability, and isn’t really private.
Place related classes and top-level functions together in a module. Unlike Java, there is no need to limit yourself to one class per module.
Use CapWords for class names, but lower_with_under.py for module names. Although there are some old modules named CapWords.py, this is now discouraged because it’s confusing when the module happens to be named after a class. (“wait – did I write import StringIO or from StringIO import StringIO?”)
Underscores may appear in unittest method names starting with test to separate logical components of the name, even if those components use CapWords. One possible pattern is test&lt;MethodUnderTest&gt;_&lt;state&gt;; for example testPop_EmptyStack is okay. There is no One Correct Way to name test methods.
File Naming Python filenames must have a .py extension and must not contain dashes (-). This allows them to be imported and unittested. If you want an executable to be accessible without the extension, use a symbolic link or a simple bash wrapper containing exec &quot;$0.py&quot; &quot;$@&quot;.
Mathematical Notation For mathematically heavy code, short variable names that would otherwise violate the style guide are preferred when they match established notation in a reference paper or algorithm. When doing so, reference the source of all naming conventions in a comment or docstring or, if the source is not accessible, clearly document the naming conventions. Prefer PEP8-compliant descriptive_names for public APIs, which are much more likely to be encountered out of context.
参考链接 Google Python Style Guide styleguide/pyguide.md   ]]></content></entry><entry><title>WiFi安全</title><url>/posts/2021-05-19-kali-wifi/</url><categories/><tags><tag>Linux</tag></tags><content type="html"> 渗透测试，从入门到入狱
查看网卡信息 airmon-ng 网卡开启监听模式 airmon-ng start {网卡名称} 例如可用的无线网卡名称为wlan0。
查看监听模式是否开启成功 iwconfig 网卡名称变成 wlan0mon 说明已经开启成功。
扫描附近热点信息 airodump-ng {处于监听模式的网卡名称} 抓取握手包 命令格式
airodump-ng -c {无线网络信道} --bssid {目标无线 AP 的硬件地址} -w {扫描结果保存的文件名} {处于监听模式的网卡名称} 扫描过程中如果有用户设备尝试连接 Wi-Fi 时，我们就会拿到握手包。当抓到握手包时，上述命令输出的第一行会显示“handshake”字样。
使用 aireplay-ng 对目标设备发起攻击 可以看到使用上述命令抓不到握手包，原因是没有客户端与 AP 进行认证连接。但是对于已有客户端连接的热点，可以发送反认证包，让客户端下线，该客户端将重新尝试连接热点，这时候就可以抓到握手包了。
发送反认证包的命令格式为
aireplay-ng -0 {发送反认证包的个数} -a {无线 AP 硬件地址} -c {强制下线的MAC地址} {处于监听模式的网卡名称} 使用 aircrack-ng 进行破解 命令格式
aircrack-ng -w {本地字典文件} {握手包} 无线网卡退出监听模式 命令格式
airmon-ng stop {处于监听模式的无限网卡名称} 注意事项 字典文件是破解的关键，网上有很多字典。 并不是所有网卡都支持监听模式，例如 DW1510，虽然执行开启监听模式命令成功，查看网卡模式也有enable字样，但是网卡名称不会加mon，实测看不到连接到热点的客户端，更抓不到握手包。而 BCM4360 更是缺少了 Linux 下的驱动，直接废物。实测 Atheros AR928X 是可以开启监听模式并抓到握手包的。
参考 kali 破解 wifi 密码 wpa-dictionary</content></entry><entry><title>一些好用的工具和软件</title><url>/posts/2021-05-09-software-tools/</url><categories/><tags><tag>Windows</tag><tag>折腾</tag></tags><content type="html"> 一些好用的工具和软件，包括但不限于 Windows 平台。
EdgelessPE 强大而优雅的 PE 工具
官网 https://home.edgeless.top 下载 https://home.edgeless.top/#download Dism++ 全新的 Windows 实用工具，也许是最强的实用工具。
官网 https://www.chuyu.me/zh-Hans 下载 https://github.com/Chuyu-Team/Dism-Multi-language/releases 文档 https://www.chuyu.me/zh-Hans/Document.html Snipaste 一个简单但强大的截图工具
官网 https://zh.snipaste.com 下载 https://zh.snipaste.com/download.html 文档 https://docs.snipaste.com/zh-cn Git for Windows 官网
https://gitforwindows.org https://git-scm.com GitHub
https://github.com/git-for-windows/git 下载
官网 GitHub 清华镜像 VSCodium 100% 开源的 VS Code，它与 VS Code 不同的是，VSCodium 不跟踪使用数据。
官网 GitHub 下载 GitHub 清华镜像 Cmder Lovely console emulator package for Windows.
官网 GitHub 下载 GitHub 清华镜像 U 盘启动工具 Ventoy 新一代多系统启动 U 盘解决方案
官网 GitHub 下载 GitHub Gitee 蓝奏云 天翼云 balenaEtcher Flash OS images to SD cards &amp;amp; USB drives, safely and easily.
官网 GitHub 下载 其他 YUMI Rufus BOOTICE Chrome 离线安装包 异次元 追梦人 官网 Win32 稳定版 Win64 稳定版 视频播放 PotPlayer 官网 下载 64 位 32 位 MPC-BE 官网 下载 IINA The modern media player for macOS.
官网 GitHub 下载 Github 清华镜像 压缩解压 7-zip 官网及下载 https://www.7-zip.org 图标美化 https://sspai.com/post/58130 Bandizip 6.25 是最后一个无广告版本，天翼云下载链接： https://cloud.189.cn/t/U32Yf2bUNjYb 访问码：6obj
Sumatra PDF 官网 下载 好软分享 GitHub 网盘主页 fxxkmakeding 首页 下载页面 镜像
https://mkd.zrj766.cn https://mirror.digac.top https://dl.hee.ink/home/1/MAKEDING https://file.kxit.net/makeding/ https://www.hopefree.club/kod/#s/6qz6Hkcg 懒勤网盘 懒得勤快 （部分软件可搜索下载）</content></entry><entry><title>玩转 Windows Terminal</title><url>/posts/2021-05-02-wt/</url><categories/><tags><tag>折腾</tag></tags><content type="html"><![CDATA[  新版的 Windows Terminal 已经支持在图形界面添加配置文件，可以方便定制 Windows Terminal。
Windows Terminal 中添加 Git Bash 打开 Windows Terminal 的设置，新增配置文件
名称填入Git Bash 命令行填入 Git Bash 安装目录下的bin\bash 例如：&quot;C:\Program Files\Git\bin\bash.exe&quot; -l ，注意必须添加-l参数。 图标填入C:\Program Files\Git\mingw64\share\git\git-for-windows.ico 点击保存即可生效。
外观定制 字体 在配置文件的外观选项中，直接输入需要的字体名称即可修改，例如改为Consolas。
背景半透明 在配置文件的外观选项中，启用acylic，并调整透明度。此项被巨硬翻译成了亚克力。
隐藏不需要的配置 2021-06-06 更新：此项现已可在设置界面更改，在配置文件下，从下拉菜单中隐藏个人资料，勾选即可。
以下是原方案：
在设置界面左下角，打开JSON文件，以隐藏系统自带的Windows PowerShell为例，定位到以下内容：
{ &#34;commandline&#34;: &#34;powershell.exe&#34;, &#34;guid&#34;: &#34;{61c54bbd-c2c6-5271-96e7-009a87ff44bf}&#34;, &#34;hidden&#34;: false, &#34;name&#34;: &#34;Windows PowerShell&#34; } 将&quot;hidden&quot;: false修改为&quot;hidden&quot;: true即可。
配色方案 在 https://windowsterminalthemes.dev/ 查看配色方案，Get theme按钮可把配色复制到剪贴板，再在 Windows Terminal 的 json 配置文件中添加。
官方文档 https://docs.microsoft.com/zh-cn/windows/terminal/   ]]></content></entry><entry><title>Windows 搞机资源</title><url>/posts/2021-04-28-windows/</url><categories/><tags><tag>Windows</tag><tag>折腾</tag></tags><content type="html"> 一些 Windows 搞机资源
原版系统镜像 Windows 10 系统 ISO 官方直链 使用非 Windows 系统打开即可获取直链。 MSDN 我告诉你 Win7 2019 集成补丁版 下载地址 SHA1 64 位旗舰版 7CC76B0015220DE956328FB934D61B710A94293D 64 位专业版 B3260CE8C339E13C4E6D327E1310B06C8E1402B0 32 位旗舰版 6F8791FBB4E883FF96B7FFC202640B0A8053D122 32 位专业版 F1B6B81C6F6C7BAB91DCAF711502706468B3D09A 简体中文语言包 64 位 32 位 系统安装好之后，再安装语言包，然后在控制面板里切换语言、地区，注销之后即可显示简体中文系统界面
镜像亮点 集成.net Framework 4.7.2； 显示系统版本号为 7601.24291，编译于 2018 年 11 月 10 日; 集成了 SP1 以后发布的有效更新 186 个。 Win7 更新合集 老外整理制作的更新合集，可用于系统封装或使用原版系统镜像全新安装 Win7 后打补丁。
下载 项目官网 下载器 磁力链接 命令行参数 /NVMe（集成 NVMe 驱动） /S （静默安装，不更改 IE 版本，不重启） /Silent（自动安装，界面显示安装进度） /NoUSB（取消集成 USB 3.0 驱动，测试发现一些 PC 集成此驱动出现蓝屏） /Temp（指定释放路径到临时文件夹） /IE11（更新安装 Internet Explorer 11） /NoSpace（跳过检查系统分区的剩余空间，不建议添加） /Reboot（如果某个补丁需要重启系统，则安装完成后自动重启系统） /FixOn（禁用 Spectre and Meltdown 安全漏洞。Windows 7 默认禁用，Server 2008 则启用）
如果要将累积更新补丁包集成到系统映像内 ，可以使用以下参数： /WimFile（指定 WIM 映像文件的位置，如 D:\intall.wim） /Optimize（集成所有更新补丁后优化 WIM 映像文件的大小） /Optimize=esd（集成所有更新补丁后 WIM 映像文件转换为 EST） /Index=（WIM 映像文件 …</content></entry><entry><title>Firefox使用小技巧</title><url>/posts/2021-04-25-firefox/</url><categories/><tags><tag>浏览器</tag><tag>折腾</tag></tags><content type="html"><![CDATA[  每天一个分手搞机小技巧
便携模式 在firefox.exe可执行文件所在目录新建firefox.bat，填入以下内容：
start firefox -profile profile 其中，-profile参数表示使用配置文件，后一个profile指定配置文件夹名称（当前目录），可根据需要生成多个配置文件。此外，使用-p参数运行，可手动选择配置文件（系统目录）。
新标签页弹出窗口 在地址栏输入about:config，将browser.link.open_newwindow.restriction更改为0，并确保browser.link.open_newwindow的值为3。
禁用自动更新 在 firefox 可执行文件所在目录中创建一个名叫distribution的文件夹，在distribution文件夹中新建policies.json的空白文档，使用文本编辑器打开policies.json，在其中输入下方内容并保存：
{ &#34;policies&#34;: { &#34;DisableAppUpdate&#34;: true } } 更多关于policy的介绍，参见 Firefox 的 GitHub 页面 。
另外，在较旧版本的 Firefox 里，可以通过选项-高级-更新，选择不检查更新来关闭自动更新；或者在about:config页面，将app.update.auto设置为false来关闭更新；新版本已移除上述两个选项。
拼写检查 字典和语言包 安装字典附加组件将为您的拼写检查器添加一个新的语言选项，拼写检查器会在您向 Firefox 输入时检查拼写。 语言包更改您的浏览器界面的语言，包括菜单、选项等。
快速安装英语（US）字典： https://addons.mozilla.org/zh-CN/firefox/addon/us-english-dictionary/ 官网下载 所有版本 https://ftp.mozilla.org/pub/firefox/releases/ 最新 ESR 版本 以 win64 简体中文版为例： https://download.mozilla.org/?product=firefox-esr-latest&os=win64&lang=zh-CN 在浏览器或下载工具中打开上述链接即可下载。 更多平台及语言版本参见 https://ftp.mozilla.org/pub/firefox/releases/latest-esr/README.txt 最新稳定版 https://ftp.mozilla.org/pub/firefox/releases/latest/README.txt 最新测试版 https://ftp.mozilla.org/pub/firefox/releases/latest-beta/README.txt 优先选择 ESR 版本，其中，Firefox 52.9.0esr 是最后一个支持 Windows XP 和 Windows Vista 的版本，Firefox 57 起使用 Quantum 引擎，在访问某些为旧浏览器设计的网站时，可以使用 Firefox 52.9.0esr 版， 下载地址 ， 简中 Win64 ， 简中 Win32 。
  ]]></content></entry><entry><title>CFW实用技巧</title><url>/posts/2021-04-23-cfw-tips/</url><categories/><tags><tag>折腾</tag></tags><content type="html"> 优雅的使用 CFW
便携模式 在 CFW 可执行文件目录中，新建一个名为data的文件夹，便携模式会将此文件夹将作为基础启动文件夹，作为Home Directory。
在不同系统上，可执行文件位置有所不同：
Windows：安装目录中Clash for Windows.exe macOS：软件包目录中/Contents/MacOS/Clash for Windows 当文件夹存在时，重启软件即可进入便携模式，此时软件将会读取/写入数据至该目录。
需要注意的是，如果是使用.exe安装包，不能在原目录中直接覆盖安装，因为安装包会先将目录清空，再写入新版本，这样会导致data文件夹丢失。所以最好下载压缩包的版本。
同理，对于 VS Code 等软件，也可以在可执行文件目录下新建data文件夹以启用便携模式。
配置文件预处理 简便方法（YAML） 如需要对下载地址为https://example.com/profile.yaml的配置文件进行预处理，操作如下：
进入 Settings 界面 滚动至 Profiles 栏 点击 Parsers 右边 Edit 打开编辑器，填入： parsers: - url: https://example.com/profile.yaml yaml: prepend-rules: - DOMAIN,test.com,DIRECT # rules最前面增加一个规则 - IP-CIDR, 0.0.0.0/0, DIRECT 点击编辑器右下角保存按钮 当配置文件触发刷新（包括自动更新）时，CFW 会读取 yaml 字段定义的值，将对应值插入/合并到原配置文件中。
正则匹配 上面例子中，使用 url 匹配配置文件地址，如果需要处理多个配置文件，可以使用正则表达式进行匹配，使用关键字 reg 设置。
例如对id9.cc生成的任意订阅链接都添加直连规则：
parsers: - reg: https://sub.id9.cc/sub+[^\s]* yaml: prepend-rules: - DOMAIN, ghproxy.com, DIRECT - DOMAIN-SUFFIX, google.cn, DIRECT - IP-CIDR, 132.0.0.0/8, DIRECT 参考： CFW 文档</content></entry><entry><title>NexT主题自定义设置</title><url>/posts/2021-04-21-next-mod/</url><categories/><tags><tag>NexT</tag><tag>折腾</tag></tags><content type="html"><![CDATA[  Hexo NexT 主题的自定义
关于 NexT 主题版本 GitHub 上目前有 3 个仓库，本博客采用最新版。
原版（v5） https://github.com/iissnan/hexo-theme-next 已停更，最后一个 release 版本是 v5.1.4 v6~v7 版 https://github.com/theme-next/hexo-theme-next 最新版是 v7.8.0，发布于 2020 年 4 月 1 日。 v8 版 https://github.com/next-theme/hexo-theme-next 持续更新中，新功能包括但不限于 jQuery、fontawesome、mathjax 等插件默认启用 CDN（默认为 jsdelivr），代码高亮支持亮暗色自动切换等。 此版本可使用 npm 安装，也可采用 git 安装。 npm install hexo-theme-next 或 git clone https://github.com/next-theme/hexo-theme-next themes/next 参考： Upgrade | NexT NexT 配置文件 最新版的 NexT 建议将主题配置文件复制到博客根目录下，并命名为_config.next.yml，然后修改此文件来实现对主题的自定义。
# Installed through npm cp node_modules/hexo-theme-next/_config.yml _config.next.yml # Installed through Git cp theme/next/_config.yml _config.next.yml 参考： Configuration | NexT 代码块配色 v8 版本支持对亮色模式和暗色模式下的代码块分别设置不同的配色，所有可用的配色方案可在 https://theme-next.js.org/highlight/ 预览并选择。
codeblock: # Code Highlight theme # All available themes: https://theme-next.js.org/highlight/ theme: light: atom-one-light dark: atom-one-dark prism: light: prism dark: prism-dark # Add copy button on codeblock copy_button: enable: true # Available values: default | flat | mac style: mac 字体修改 在主题配置文件中，关于字体设置的选项如下
# --------------------------------------------------------------- # Font Settings # --------------------------------------------------------------- # Find fonts on Google Fonts (https://fonts.google.com) # All fonts set here will have the following styles: # light | light italic | normal | normal italic | bold | bold italic # Be aware that setting too much fonts will cause site running slowly # --------------------------------------------------------------- # Web Safe fonts are recommended for `global` (and `title`): # Arial | Tahoma | Helvetica | Times New Roman | Courier New | Verdana | Georgia | Palatino | Garamond | Comic Sans MS | Trebuchet MS # --------------------------------------------------------------- font: enable: true # Uri of fonts host, e.g. https://fonts.googleapis.com (Default). host: # Font options: # `external: true` will load this font family from `host` above. # `family: Times New Roman`. Without any quotes. # `size: x.x`. Use `em` as unit. Default: 1 (16px) # Global font settings used for all elements inside &lt;body&gt;. global: external: true family: Noto Serif SC size: # Font settings for site title (.site-title). title: external: true family: size: # Font settings for headlines (&lt;h1&gt; to &lt;h6&gt;). headings: external: true family: size: # Font settings for posts (.post-body). posts: external: true family: # Font settings for &lt;code&gt; and code blocks. codes: external: true family: 首先启用字体功能
font: enable: true # Uri of fonts host, e.g. https://fonts.googleapis.com (Default). host: fonts.loli.net 默认情况下，从fonts.googleapis.com加载字体，由于众所周知的原因，可将host修改为fonts.loli.net。
在 https://fonts.google.com 上查看喜欢的字体，例如将博客全局字体修改为Noto Serif SC。
# Global font settings used for all elements inside &lt;body&gt;. global: external: true family: Noto Serif SC size: 以上，就能实现最基本的字体修改。
更多修改参见： NexT 主题 v8 配置自定义字体 Hexo Next 主题字体相关配置   ]]></content></entry><entry><title>使用 GitHub Action 自动部署 Hexo 博客</title><url>/posts/2021-04-20-github-action-hexo/</url><categories/><tags><tag>Hexo</tag><tag>折腾</tag></tags><content type="html"><![CDATA[  偷懒是人类的第一生产力
介绍 Github Actions 可以很方便实现 CI/CD 工作流，来帮我们完成一些工作，比如实现自动化测试、打包、部署等操作。本文将介绍利用 Github Actions 实现自动部署 hexo 到 Github Pages。
使用传统的方法，我们需要在本地电脑上安装 hexo 环境，写完文章执行相关命令进行部署。
有时候为了简单博文内容，但手头的设备上没有 hexo 的环境，这时候就可以借助 GitHub Actions 来实现云端部署。
创建所需仓库 创建 blog 仓库用来存放 Hexo 博文的 Markdown 源文件和配置文件（主题、站点等） 创建 username.github.io 仓库用来存放静态博客页面 生成部署密钥 ssh-keygen -f github-deploy-key 当前目录将生成 github-deploy-key 和 github-deploy-key.pub 两个文件。
配置部署密钥 复制 github-deploy-key 文件内容，在 blog 仓库 Settings -&gt; Secrets -&gt; Add a new secret 页面上添加。 在 Name 输入框填写 HEXO_DEPLOY_PRI。 在 Value 输入框填写 github-deploy-key 文件内容。 复制 github-deploy-key.pub 文件内容，在 username.github.io 仓库 Settings -&gt; Deploy keys -&gt; Add deploy key 页面上添加。 在 Title 输入框填写 HEXO_DEPLOY_PUB。 在 Key 输入框填写 github-deploy-key.pub 文件内容。 勾选 Allow write access 选项。 编写 Github Actions Workflow 模版 在 blog 仓库根目录下创建 .github/workflows/deploy.yml 文件。
deploy.yml 文件内容示例如下：
name: CI on: push: branches: - main env: GIT_USER: dslwind GIT_EMAIL: dslmuwind@gmail.com THEME_REPO: theme-next/hexo-theme-next THEME_BRANCH: master DEPLOY_REPO: dslwind/dslwind.github.io DEPLOY_BRANCH: master jobs: build: name: Build on node ${{ matrix.node_version }} and ${{ matrix.os }} runs-on: ubuntu-latest strategy: matrix: os: [ubuntu-latest] node_version: [12.x] steps: - name: Checkout uses: actions/checkout@v2 - name: Checkout theme repo uses: actions/checkout@v2 with: repository: ${{ env.THEME_REPO }} ref: ${{ env.THEME_BRANCH }} path: themes/next - name: Checkout deploy repo uses: actions/checkout@v2 with: repository: ${{ env.DEPLOY_REPO }} ref: ${{ env.DEPLOY_BRANCH }} path: .deploy_git - name: Use Node.js ${{ matrix.node_version }} uses: actions/setup-node@v1 with: node-version: ${{ matrix.node_version }} - name: Configuration environment env: HEXO_DEPLOY_PRI: ${{secrets.HEXO_DEPLOY_PRI}} run: | sudo timedatectl set-timezone &#34;Asia/Shanghai&#34; mkdir -p ~/.ssh/ echo &#34;$HEXO_DEPLOY_PRI&#34; &gt; ~/.ssh/id_rsa chmod 600 ~/.ssh/id_rsa ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts git config --global user.name $GIT_USER git config --global user.email $GIT_EMAIL cp post.styl themes/next/source/css/_common/components/post/post.styl - name: Install dependencies run: | npm install - name: Deploy hexo run: | npm run deploy 配置文件 在 source 目录下新建_data文件夹，将 next 主题的配置文件复制到此目录并重命名为next.yml，并将配置的 override 属性修改为 true；另外需要修改行内代码颜色，同时将themes/next/source/css/_common/components/post/post.styl复制到项目根目录下。
另外，为了能在云端成功部署，需要把传统方法生成的 package.json、站点配置文件_config.yml和source文件夹复制到blog仓库
参考 利用 Github Actions 自动部署 Hexo 博客 GitHub Actions 自动部署 Hexo NexT 主题数据文件   ]]></content></entry><entry><title>更改 Windows 远程桌面的侦听端口</title><url>/posts/2021-04-16-rdp/</url><categories/><tags><tag>折腾</tag><tag>Windows</tag><tag>远程桌面</tag></tags><content type="html"><![CDATA[  通过远程桌面客户端连接到计算机（Windows 客户端或 Windows Server）时，计算机上的远程桌面功能会通过定义的侦听端口（默认情况下为 3389）“侦听”连接请求。可以通过修改注册表来更改 Windows 计算机上的侦听端口。
注册表修改法 步骤：
启动注册表编辑器； 导航到以下注册表子项： HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp 查找端口号； 单击编辑&gt;修改，然后单击十进制； 键入新端口号，然后单击确定； 关闭注册表编辑器，然后重新启动计算机； 下次使用远程桌面连接连接到此计算机时，必须键入新端口。如果正在使用防火墙，请确保将防火墙配置为允许连接到新端口号。
PowerShell 命令修改法 可运行以下 PowerShell 命令来查看当前端口
Get-ItemProperty -Path &#39;HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&#39; -name &#34;PortNumber&#34; 还可运行以下 PowerShell 命令来更改 RDP 端口。在此命令中，我们会将新的 RDP 端口指定为 3390。
Set-ItemProperty -Path &#39;HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&#39; -name &#34;PortNumber&#34; -Value 3390 New-NetFirewallRule -DisplayName &#39;RDPPORTLatest&#39; -Profile &#39;Public&#39; -Direction Inbound -Action Allow -Protocol TCP -LocalPort 3390 参考： https://docs.microsoft.com/zh-cn/windows-server/remote/remote-desktop-services/clients/change-listening-port   ]]></content></entry><entry><title>将 Windows Terminal 添加到右键菜单</title><url>/posts/2020-06-22-wt/</url><categories/><tags><tag>折腾</tag><tag>terminal</tag><tag>Windows</tag></tags><content type="html"><![CDATA[  Windows Terminal Yes!!!
2021-04-19 更新： Windows 10 bulid 21337 及之后的版本内置了 Windows Terminal，右键菜单自带“Open in Windows Terminal”项，无需自行修改。
在新版本上如需禁用，则将以下内容保存到扩展名为.reg的文件中，并双击打开。
Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Shell Extensions\Blocked] &#34;{9F156763-7844-4DC4-B2B1-901F640F5155}&#34;=- 如需再次启用，则将以下内容保存到扩展名为.reg的文件中，并双击打开。
Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Shell Extensions\Blocked] &#34;{9F156763-7844-4DC4-B2B1-901F640F5155}&#34;=&#34;&#34; 以下方法适用于旧的 Windows10 版本。
正文 将以下代码保存到扩展名为 .reg 的文件中，双击打开
需要按住 shift + 右键打开 Windows Registry Editor Version 5.00 [HKEY_CLASSES_ROOT\Directory\Background\shell\wt] @=&#34;Windows Terminal Here&#34; &#34;Extended&#34;=&#34;&#34; [HKEY_CLASSES_ROOT\Directory\Background\shell\wt\command] @=&#34;C:\\Users\\你的用户名\\AppData\\Local\\Microsoft\\WindowsApps\\wt.exe&#34; 不需要 shift，直接右键打开 Windows Registry Editor Version 5.00 [HKEY_CLASSES_ROOT\Directory\Background\shell\Windows_Terminal] @=&#34;Windows Terminal Here&#34; [HKEY_CLASSES_ROOT\Directory\Background\shell\Windows_Terminal\command] @=&#34;C:\\Users\\你的用户名\\AppData\\Local\\Microsoft\\WindowsApps\\wt.exe&#34; 当前目录打开时，Terminal 里的路径不是当前目录 检查一下配置文件，检查startingDirectory，需要修改为:
{ &#34;profiles&#34;: [ { &#34;startingDirectory&#34;: null } ] } 上述修改只对单个配置文件有效。
给Windows Terminal Here添加图标 下载Windows Terminal的 图标文件 在注册表中，给 Windows Terminal 添加 Icon 属性
[HKEY_CLASSES_ROOT\Directory\Background\shell\Windows_Terminal] &#34;Icon&#34;=&#34;图标文件所在路径&#34; 示例
Windows Registry Editor Version 5.00 [HKEY_CLASSES_ROOT\Directory\Background\shell\Windows_Terminal] @=&#34;Windows Terminal Here&#34; &#34;Icon&#34;=&#34;C:\\Users\\水木风\\AppData\\Local\\Microsoft\\WindowsApps\\terminal.ico&#34; [HKEY_CLASSES_ROOT\Directory\Background\shell\Windows_Terminal\command] @=&#34;C:\\Users\\水木风\\AppData\\Local\\Microsoft\\WindowsApps\\wt.exe&#34; 注意 如果用户名中包含中文，必须将 reg 文件保存成ANSI编码格式，否则会导入出错。
  ]]></content></entry><entry><title>古剑MOD</title><url>/posts/2020-06-02-gujian-mod/</url><categories/><tags><tag>游戏</tag></tags><content type="html"> 船新的游戏体验
素材提取 游戏解包软件 RPGViewer 用RPGViwer解包游戏数据。 由于古剑一的数据，软件解包后不会自动分类，因此不同 zpk 文件要解包到不同的文件夹里。
需要解包的文件：
古剑一 Data\Objects\characters.zpk 古剑二 GameData.zpkg 古剑三 data000 data001 古剑 MOD 辅助工具 下载地址 古剑一 官网版 Steam 版 注意，“官网版”适用于官网下载、CD 等安装版，“Steam 版”则适用于 Steam 和 腾讯WeGame 版，两个版本不能通用，官网版也不适用于破解版。
古剑二 MOD 管理工具 MOD 制作工具 原始链接: https://pan.baidu.com/s/1VClsrv4FiynGsTnrAWZIAA 提取码:5141
使用方法 古剑一
启用 MOD 功能 将文件解压，得到两个文件GameServices.dll、GJPatch.ini和文件夹Patches，放到游戏Bin目录下。 加载 MOD 举例来说，解包Data\Objects\characters.zpk文件，修改解包目录里的texture文件夹里的101-01.dds，把修改后的101-01.dds放到游戏目录Data\Objects\characters\texture里，然后开始游戏换上对应外装即可。 古剑二
使用 MOD 打开《古剑奇谭二》MOD 管理工具，选择加载MOD安装包——安装MOD。如第一次使用 MOD，还需点击安装MOD运行补丁。关闭 MOD 管理工具，启动游戏，换上相应的外装即可。 制作 MOD 文件 将修改后的 DDS 贴图放在正确的路径，打开《古剑奇谭二》MOD 制作工具。填写相应信息，MOD 介绍中最好说明此 MOD 是基于哪件外装所做的修改，便于大家的使用以及避免冲突。 完整的教程见： 古剑奇谭二换装 MOD 制作使用方法 NVidia PS 插件 64 位 32 位 DDS Utilities Legacy Texture Tools 贴图修改完成后保存时注意勾选alpha 通道，存储格式选DXT3或DXT5。其中，DXT3 可很好地用于 Alpha 通道锐利、对比强烈的半透和镂空材质，适用于铁栏杆等 Alpha 边缘清晰的贴图。而 DXT5 则更适合 Alpha 通道 …</content></entry><entry><title>极路由3搞机资源</title><url>/posts/2020-04-24-ji3/</url><categories/><tags><tag>路由器</tag><tag>折腾</tag></tags><content type="html"><![CDATA[  路由器基本情况 型号：HC5861 CPU：mt7620, 580 MHz 厂商：Hi­WiFi 内存：128 MB, DDR2 闪存：16 MB 十年脑血栓设计：百兆 WAN 口，一个千兆 LAN 口 USB 2.0 端口、TF ( Mi­cro SD )卡端口各一个 Breed 下载地址 极 3 直链 刷写 上传breed文件到路由器/tmp目录下，或者使用 ssh 登录到路由器后台下载。 cd /tmp curl -O -k https://breed.hackpascal.net/breed-mt7620-hiwifi-hc5861.bin 执行以下命令进行刷写: mtd -r write /tmp/breed-mt7620-hiwifi-hc5861.bin u-boot 进入 Breed PC 用网线连路由器的 LAN 口（必须用网线），并设置为自动获取 IP； 路由器断电； 先按住路由器的 reset 键，再插入路由器电源，保持按住 reset 键 5 秒左右，路由器灯闪亮后松开 reset 键； PC 网卡获取到 192.168.1.x 的地址，（如未获取到手工设置）； 浏览器访问 192.168.1.1，即 Breed Web 恢复控制台页面。 固件 Padavan 固件 下载地址 直链 默认配置
固件网关：192.168.123.1 管理页面：http://my.router/ 管理页面：http://192.168.123.1/ 管理账号：admin 管理密码：admin WiFi 密码：1234567890 刷机不恢复默认值 一键自动更新固件脚本
wget --no-check-certificate -O- https://opt.cn2qq.com/opt-script/up.sh &gt; /tmp/up.sh &amp;&amp; bash &lt; /tmp/up.sh &amp; PanguBox 下载地址 前身是 PandoraBox，基于 OpenWrt 的魔改版本，此固件已停更。 打开高级设置 —— 外部网络 (WAN) - 外网设置 —— 端口隔离和 VLAN 过滤，设置为 LAN4 就可以让千兆口当做 WAN 口使用。
OpenWrt 官网下载 输入 HC5861 搜索即可下载最新版 此固件仍在持续更新中，但不支持 5G 频段。
B50 固件 极路由 B50 与极路由 3 硬件相同，但是 B50 是千兆 WAN 口，经测试固件可以通刷，极路由 3 刷入 B50 固件可实现千兆 LAN 口变 WAN 口。 虽然用上了千兆口，但是使用 2.4G WiFi 测速还是百兆，使用 5G WiFi 才能超过百兆。
参考： 极路由 3 刷机过程 极路由 3 = B50？ 如何让 极路由器 3 发挥最大性能   ]]></content></entry><entry><title>Ubuntu添加删除用户</title><url>/posts/2019-06-06-ubuntu-user/</url><categories/><tags><tag>Linux</tag></tags><content type="html"> 管理 Ubuntu 用户
添加新用户 sudo adduser newuser 赋予新用户 sudo 权限 sudo usermod -aG sudo newuser 删除用户 移除用户但保留用户文件 sudo deluser olduser 移除用户并删除用户文件 sudo deluser --remove-home olduser 如果修改了/etc/sudoers文件，则删除与olduser相关的行。
参考： Ubuntu 16.04 添加删除用户</content></entry><entry><title>bash里的for循环</title><url>/posts/2019-06-05-bash-for/</url><categories/><tags><tag>bash</tag><tag>Linux</tag></tags><content type="html"><![CDATA[  Bash For Loop
简单例子 for i in 1 2 3 4 5; do echo &#34;counter: $i&#34;; done 脚本 #!/bin/bash for i in 1 2 3 4 5 do echo &#34;counter: $i&#34; done 变量 for file in *; do echo &#34;$file&#34;; done file1.txt file2.txt file3.txt seq 25 30 25 26 27 28 29 30 for counter in $(seq 1 255); do echo &#34;$counter&#34;; done for counter in $(seq 1 255); do ping -c 1 &#34;10.0.0.$counter&#34;; done PING 10.0.0.1 (10.0.0.1) 56(84) bytes of data. PING 10.0.0.2 (10.0.0.2) 56(84) bytes of data. ... range for counter in {1..255}; do ping -c 1 10.0.0.$counter; done for counter in {1..255..5}; do echo &#34;ping -c 1 10.0.0.$counter&#34;; done ping -c 1 10.0.0.1 ping -c 1 10.0.0.6 ping -c 1 10.0.0.11 ping -c 1 10.0.0.16 chain #!/bin/bash for i in 1 2 3 4 5; do echo &#34;Hold on, connecting to 10.0.1.$i&#34; ssh root@&#34;10.0.1.$i&#34; uptime echo &#34;All done, on to the next host!&#34; done for i in 1 2 3 4 5; do echo &#34;Hold on, connecting to 10.0.1.$i&#34;; ssh root@&#34;10.0.1.$i&#34; uptime; echo &#34;All done, on to the next host&#34;; done 例子 For each user on the system, write their password hash to a file named after them for username in $(awk -F: &#39;{print $1}&#39; /etc/passwd); do grep $username /etc/shadow | awk -F: &#39;{print $2}&#39; &gt; $username.txt; done #!/bin/bash for username in $(awk -F: &#39;{print $1}&#39; /etc/passwd) do grep $username /etc/shadow | awk -F: &#39;{print $2}&#39; &gt; $username.txt done Rename all *.txt files to remove the file extension for filename in *.txt; do mv &#34;$filename&#34; &#34;${filename%.txt}&#34;; done #!/bin/bash for filename in *.txt do mv &#34;$filename&#34; &#34;${filename%.txt}&#34; done Use each line in a file as an IP to connect to for ip in $(cat ips.txt); do ssh root@&#34;$ip&#34; yum -y update; done #!/bin/bash for ip in $(cat ips.txt) do ssh root@&#34;$ip&#34; yum -y update done 批量转换图片格式 for i in *.jpg; do convert $i ${i%.jpg}.png; done   ]]></content></entry><entry><title>Markdown与LaTeX</title><url>/posts/2019-06-04-markdown-latex/</url><categories/><tags><tag>LaTeX</tag><tag>Markdown</tag></tags><content type="html"><![CDATA[  $\LaTeX$
$\LaTeX$ 字体参照表 $\LaTeX$ 公式 实例效果 说明 \mathrm{ABCD abcd 0123} $\mathrm{ABCD abcd 0123}$ 罗马体 \mathbf{ABCD abcd 0123} $\mathbf{ABCD abcd 0123}$ 罗马粗体 \mathtt{ABCD abcd 0123} $\mathtt{ABCD abcd 0123}$ 打印体 \mathbb{ABCD abcd 0123} $\mathbb{ABCD abcd 0123}$ 黑板粗 \mathcal{ABCD abcd 0123} $\mathcal{ABCD abcd 0123}$ 手写体 \mathscr{ABCD abcd 0123} $\mathscr{ABCD abcd 0123}$ 剧本体 \mathfrak{ABCD abcd 0123} $\mathfrak{ABCD abcd 0123}$ Fraktur 体 $\LaTeX$ 希腊字母表 对于大写希腊字母与英文字母相同的，直接输入英文大写字母即可，不过是斜体； 如果想输入正体而非斜体的大写字母，请用字体语法加字母，如：\mathrm{A}。 $\LaTeX$ 一元运算符 符号 实例效果 说明 ! $!$ 阶乘 \neg $\neg$ 非 $\LaTeX$ 关系运算符 $\LaTeX$ 公式 实例效果 说明 $\LaTeX$ 公式 实例效果 说明 &lt; $&lt;$ 小于 &gt; $&gt;$ 大于 \nless $\nless$ 不小于 \ngtr $\ngtr$ 不大于 \leq $\leq$ 小于或等于 \geq $\geq$ 大于或等于 \leqslant $\leqslant$ 小于或等于 \geqslant $\geqslant$ 大于或等于 \nleq $\nleq$ 不小于或等于 \ngeq $\ngeq$ 既不大于也不等于 \nleqslant $\nleqslant$ 不小于或等于 \ngeqslant $\ngeqslant$ 既不大于也不等于 \prec $\prec$ \succ $\succ$ \nprec $\nprec$ \nsucc $\nsucc$ \preceq $\preceq$ \succeq $\succeq$ \npreceq $\npreceq$ \nsucceq $\nsucceq$ \ll $\ll$ \gg $\gg$ \lll $\lll$ \ggg $\ggg$ \subset $\subset$ 子集 \supset $\supset$ 超集 \not\subset $\not\subset$ \not\supset $\not\supset$ \subseteq $\subseteq$ \supseteq $\supseteq$ \nsubseteq $\nsubseteq$ \nsupseteq $\nsupseteq$ \sqsubset $\sqsubset$ \sqsupset $\sqsupset$ \sqsubseteq $\sqsubseteq$ \sqsupseteq $\sqsupseteq$ = $=$ 等于 \simeq $\simeq$ \doteq $\doteq$ \sim $\sim$ \equiv $\equiv$ 恒等 \propto $\propto$ 相关 \approx $\approx$ 约等于 \neq or \ne $\neq$ 不等于 \cong $\cong$ \parallel $\parallel$ 与$\ldots$平行 \nparallel $\nparallel$ 与$\ldots$不平行 \asymp $\asymp$ \bowtie $\bowtie$ \vdash $\vdash$ \dashv $\dashv$ \in $\in$ \ni $\ni$ \smile $\smile$ \frown $\frown$ \models $\models$ \notin $\notin$ \perp $\perp$ 与$\ldots$垂直 \mid $\mid$ $\LaTeX$ 二元运算符 $\LaTeX$ 公式 实例效果 说明 $\LaTeX$ 公式 实例效果 说明 \pm $\pm$ \cap $\cap$ 交集 \mp $\mp$ \cup $\cup$ 并集 \times $\times$ \uplus $\uplus$ \div $\div$ \sqcap $\sqcap$ \ast $\ast$ \sqcup $\sqcup$ \star $\star$ \vee $\vee$ \dagger $\dagger$ \wedge $\wedge$ \ddagger $\ddagger$ \cdot $\cdot$ \diamond $\diamond$ \oplus $\oplus$ \bigtriangleup $\bigtriangleup$ \ominus $\ominus$ \bigtriangledown $\bigtriangledown$ \otimes $\otimes$ \triangleleft $\triangleleft$ \oslash $\oslash$ \triangleright $\triangleright$ \odot $\odot$ \bigcirc $\bigcirc$ \circ $\circ$ \bullet $\bullet$ \setminus $\setminus$ 集合差 \wr $\wr$ \amalg $\amalg$   ]]></content></entry><entry><title>Markdown数学公式</title><url>/posts/2019-06-04-mathjaxlearning/</url><categories/><tags><tag>MathJax</tag><tag>Markdown</tag></tags><content type="html"> 优雅的数学公式
字符修饰 字母修饰 代码 公式效果 上标 $C^2$ $C^2$ 下标 $C_n$ $C_n$ 放下面 $\sum\limits_{i&amp;gt;1}$ $\sum\limits_{i&amp;gt;1}$ 放下面 $\sum\limits^{N}$ $\sum\limits^{N}$ 堆叠 $\stackrel{\mathrm{def}}{=}$ $\stackrel{\mathrm{def}}{=}$ 矢量 $\vec a$ $\vec a$ 矢量(向右箭头) $\overrightarrow{xy}$ $\overrightarrow{xy}$ 希腊字母 代码 小写字母 代码 大写字母 $\alpha$ $\alpha$ $\Alpha$ $\Alpha$ $\beta$ $\beta$ $\Beta$ $\Beta$ $\gamma$ $\gamma$ $\Gamma$ $\Gamma$ $\delta$ $\delta$ $\Delta$ $\Delta$ $\epsilon$ $\epsilon$ $\Epsilon$ $\Epsilon$ $\varepsilon$ $\varepsilon$ - - $\zeta$ $\zeta$ $\Zeta$ $\Zeta$ $\eta$ $\eta$ $\Eta$ $\Eta$ $\theta$ $\theta$ $\Theta$ $\Theta$ $\kappa$ $\kappa$ $\Kappa$ $\Kappa$ $\lambda$ $\lambda$ $\Lambda$ $\Lambda$ $\mu$ $\mu$ $\Mu$ $\Mu$ $\nu$ $\nu$ $\Nu$ $\Nu$ $\xi$ $\xi$ $\Xi$ $\Xi$ $\pi$ $\pi$ $\Pi$ $\Pi$ $\rho$ $\rho$ $\Rho$ $\Rho$ $\sigma$ $\sigma$ $\Sigma$ $\Sigma$ $\tau$ $\tau$ $\Tau$ $\Tau$ $\upsilon$ $\upsilon$ $\Upsilon$ $\Upsilon$ $\phi$ $\phi$ $\Phi$ $\Phi$ $\varphi$ $\varphi$ - - $\chi$ $\chi$ $\Chi$ $\Chi$ $\psi$ $\psi$ $\Psi$ $\Psi$ $\omega$ $\omega$ $\Omega$ $\Omega$ 常用符号 代码 符合 解释 $\sin(x)$ $\sin(x)$ 正弦函数 $\log(x)$ $\log(x)$ 对数函数 $\sum_{i=0}^n$ $\sum_{i=0}^n$ 累加和 $\prod_{i=0}^n$ $\prod_{i=0}^n$ 累积乘 $\displaystyle$ $\displaystyle \sum_{i=0}^n$ 块显示 $\ldots$ $1\ldots2$ 底部省略号 $\cdots$ $+\cdots+$ 中部省略号 $\int_a^b$ $\int_a^b$ 积分符号 $\lim$ $\lim$ 极限函数 $\to$ $\to$ 箭头 $\vec{a}$ $\vec{a}$ 矢量 a $90^\circ$ $90^\circ$ 度数的圆圈 $\uparrow$ $\uparrow$ 上箭头 $\Uparrow$ $\Uparrow$ 双上箭头 $\partial y$ $\partial y$ 导数/偏导 $\infty$ $\infty$ 无穷 $\Pi$ $\Pi_{i=0}$ 累乘 $\sqrt{x}$ $\sqrt{x}$ 求平方根 $\overline{a+b}$ $\overline{a+b}$ 上划线 $\underline{a+b}$ $\underline{a+b}$ 下划线 $\overbrace{a+b}$ $\overbrace{a+b}$ 上括号 $\underbrace{a+b}$ $\underbrace{a+b}$ 下括号 $\pm{a}{b}$ $\pm{a}{b}$ 正负号 $\mp{a}{b}$ $\mp{a}{b}$ 负正号 $\times$ $\times$ 乘法 $\cdot$ $\cdot$ 点乘 $\ast$ $\ast$ 星乘 $\div$ $\div$ 除法 $\frac{1}{5}$ $\frac{1}{5}$ 分数 $\dfrac{1}{5}$ $\dfrac{1}{5}$ 分数，字体更大 $\leq$ $\leq$ 小于等于 $\not$ $\not$ 非 $\geq$ $\geq$ 大于等于 $\neq$ $\neq$ 不等于 $\nleq$ $\nleq$ 不小于等于 $\ngeq$ $\ngeq$ 不大于等于 $\sim$ $\sim$ 相关符号 $\approx$ $\approx$ 约等于 $\equiv$ $\equiv$ 常等于/恒等于 $\bigodot$ $\bigodot$ 加运算符 $\bigotimes$ $\bigotimes$ 乘运算符 集合符合 代码 符合 解释 $\in$ $\in$ 属于 $\notin$ $\notin$ 不属于 $\subset$ $\subset$ 真子集 $\not \subset$ $\not \subset$ 非子集 $\subseteq$ $\subseteq$ 子集 $\supset$ $\supset$ 超集 $\supseteq$ $\supseteq$ 超集 $\cup$ $\cup$ 并集 $\cap$ $\cap$ 交集 $\mathbb{R}$ $\mathbb{R}$ 实数集 $\emptyset$ $\emptyset$ 空集</content></entry><entry><title>使用frp实现内网穿透</title><url>/posts/2019-05-19-frp/</url><categories/><tags><tag>frp</tag><tag>折腾</tag><tag>内网穿透</tag><tag>远程桌面</tag></tags><content type="html"> GitHub 项目地址 服务端 安装 从 Release 页面 下载最新版本并解压
wget https://github.com/fatedier/frp/releases/download/v0.36.2/frp_0.36.2_linux_amd64.tar.gz tar -xzvf frp.tar.gz &amp;amp;&amp;amp; cd frp 将 frps 复制到 /usr/bin目录下
cp frps /usr/bin/ 配置 修改 frps.ini 文件，添加密码和 udp 端口用于点对点内网穿透。
## frps.ini [common] bind_port = 7000 token = 12345678 bind_udp_port = 7001 设置开机启动
mkdir /etc/frp cp frps.ini /etc/frp/frps.ini cp systemd/frps.service /etc/systemd/system/frps.service systemctl enable frps 启动 frp 并设置开机自启：systemctl enable frps 启动 frp：systemctl start frps 查看 frp 运行状态：systemctl status frps 重启 frp 服务：systemctl restart frps 客户端 安装 客户端的安装方法与服务端类似，需将将frps换成frpc。
配置 修改frpc.ini
ssh
## frpc.ini [common] server_addr = x.x.x.x server_port = 7000 [ssh] type = tcp local_ip = 127.0.0.1 local_port = 22 remote_port = 6000 点对点内网穿透
启动 frpc，转发内网的 ssh 服务，配置如下，不需要指定远程端口:
## frpc.ini [common] server_addr = x.x.x.x server_port = 7000 [p2p_ssh] type = xtcp ## 只有 sk 一致的用户才能访问到此服务 sk = abcdefg local_ip = 127.0.0.1 local_port = 22 在要访问这个服务的机器上启动另外一个 frpc，配置如下:
## frpc.ini [common] server_addr = x.x.x.x server_port = 7000 [p2p_ssh_visitor] type = xtcp ## xtcp 的访问者 role = visitor ## 要访问的 xtcp 代理的名字 server_name = p2p_ssh sk = abcdefg ## 绑定本地端口用于访问 ssh 服务 bind_addr = 127.0.0.1 bind_port = 6000 微软远程桌面（RDP）
frp 也可以用于转发内网的 Windows 远程桌面，配置如下：
#frpc.ini [RDP] type = tcp local_port = 3389 remote_port = 6001 需要注意的是，使用 RDP 必须设置 Windows 账户的密码，否则无法连接。
参考： frp 文档</content></entry><entry><title>电子书制作</title><url>/posts/2019-04-27-ebook/</url><categories/><tags><tag>ePub</tag><tag>多看</tag><tag>折腾</tag></tags><content type="html"><![CDATA[  多看电子书规范扩展开放计划
一、全屏插图页 全屏插图页扩展在ePub文件的opf文件中的spine节点下，spine节点定义了ePub文件中文章出现的顺序，每一个itemref项为一章，我们扩展一个properties属性值duokan-page-fullscreen，示例如下：
&amp;lt;spine&amp;gt; &amp;lt;itemref idref=&amp;#34;chapter100&amp;#34; properties=&amp;#34;duokan-page-fullscreen&amp;#34;&amp;gt; &amp;lt;/spine&amp;gt; 这样id为chapter100的章就会按全屏插图页逻辑处理，而相应的html内容应如下所示：
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;standalone=&amp;#34;no&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE html PUBLIC &amp;#34;-//W3C//DTD XHTML 1.1//EN&amp;#34; &amp;#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&amp;#34;&amp;gt; &amp;lt;html xmlns=&amp;#34;http://www.w3.org/1999/xhtml&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt; &amp;lt;link href=&amp;#34;../Styles/stylesheet.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; /&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;&amp;lt;img src=&amp;#34;../Images/sanguoyanyi.png&amp;#34; /&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 注意，html中应只含有一个img，不需要设置任何样式，程序会自动将图片撑满展示。
二、富文本脚注 用户可以通过单击文内脚注的图标，弹出显示脚注内容的窗口。文内注可以支持复杂的内容描述，比如多段落，带有样式的文本等等，具体描述如下： 在需要插入注的位置插入如下代码：
&amp;lt;a …  ]]></content></entry><entry><title>广东工业大学校园网使用路由器</title><url>/posts/2018-10-16-gdut-wifi/</url><categories/><tags><tag>路由器</tag><tag>折腾</tag></tags><content type="html"><![CDATA[  去他妈的 Dr.COM
新方案 在 Drcom 下使用路由器上校园网 WIFI(以广东工业大学、极路由 1S HC5661A、OpenWrt 为例) Drcom P 绕过检测移动设备的一种思路 旧方法 自动配置 工具包下载 使用winscp把工具包放到路由器的/tmp目录下 解压工具包
cd /tmp tar -xzvf dogcom.tar.gz cd dogcom/ 执行一键配置脚本 这脚本是整合了接下来全部步骤，若成功执行则无需进行往后的步骤，但不推荐使用，由于整合了下面的操作，定位错误会相对困难。
./drcom-configure.sh 手动配置 安装 dogcom(此处的 ipk 适用于极 3 潘多拉固件) opkg install dogcom.ipk 修改 pppoe 拨号脚本的用户名转义字符的处理（由于 drcom 拨号时会在账号前加 \r\n 转义字符） cp /lib/netifd/proto/ppp.sh /lib/netifd/proto/ppp.sh_bak sed -i &#39;/proto_run_command/i username=`echo -e &#34;$username&#34;`&#39; /lib/netifd/proto/ppp.sh sed -i &#39;/proto_run_command/i password=`echo -e &#34;$password&#34;`&#39; /lib/netifd/proto/ppp.sh 然后在路由器的上网方式设置为宽带拨号，用户名为\r\n+学号，密码为校园网密码
尝试拨号，尝试拨号的时间大概 1~3 分钟，出现已连接就进行下一步操作，否则查看拨号日志查找问题所在
配置 drcom-generic 脚本
cp drcom.conf /etc/drcom.conf cp pppoe.sh /usr/bin/pppoe.sh chmod +x /usr/bin/pppoe.sh 配置自启动脚本，编辑/etc/rc.local // 在 exit 0 前加入以下两行 sleep 15 pppoe.sh 配置到此完毕。重启路由器，观察路由器能否拨号成功并保持连接。 参考：
(转)广东工业大学路由器使用-Dr-com-校园网（OpenWRT，HIWifi-通用） 【DrCOM/dr.com 校园网路由器】使用教程 c 语言单文件 dogcom 不需 python   ]]></content></entry><entry><title>hexo折腾笔记</title><url>/posts/2018-08-25-hexo/</url><categories/><tags><tag>Hexo</tag><tag>折腾</tag></tags><content type="html"> 生命不息，折腾不止！
注：本文大部分内容写于2018年，使用的Hexo版本为3.x，NexT版本为v5，部分内容已过时，当前（2021年），Hexo版本已升级到5.x，NexT主题版本已更新到v8，最新的配置参见Hexo和NexT的官方文档。
搭建环境 1、安装 Node.js Node.js 官网 建议下载 LTS 版本，官网首页的 LTS 是14.x版本，如果使用Windows 7操作系统，则需要下载 12.x版本 2、安装 Git 官网下载 清华镜像 3、安装 Hexo
npm install hexo-cli -g 注：nodejs 和 npm 的仓库托管在 S3 上，在国内访问十分困难，这里可以用淘宝的镜像站 npm.taobao.org 代替。
npm 使用 registry 这个属性指定仓库，因此配置这个属性即可。修改 npm 配置属性的几种方法详见官方文档。
修改 registry 的方法，以下三种任意一种即可:
修改~/.npmrc文件(没有就自行新建一个)，写入 registry = https://registry.npm.taobao.org 添加环境变量NPM_CONFIG_REGISTRY=https://registry.npm.taobao.org 使用命令npm config set registry https://registry.npm.taobao.org 类似地，以下命令将disturl属性指向 https://npm.taobao.org/dist npm config set disturl https://npm.taobao.org/dist
初始化博客 新建并进入博客文件夹blog(在运行以下命令前，确保此文件夹是空文件夹)，在此处打开Git Bash，输入
hexo init 配置博客 在blog目录下，用文本编辑器打开_config.yml（站点配置文件），修改参数。
注意，在每个参数的:后都需要有一个空格
修改网站相关信息 # Site title: 水木风的个人博客 subtitle: description: keywords: author: dslwind language: zh-CN timezone: Asia/Shanghai 配置 URL 将url修改为个人域名、github.io等的网 …</content></entry><entry><title>二进制补码</title><url>/posts/2018-06-18-twos-complement/</url><categories/><tags><tag>CS</tag><tag>二进制</tag><tag>补码</tag></tags><content type="html"> 前言 N 年前接触二进制编码的时候，对补码一知半解，不是很懂，直到看了 CS:APP （深入理解计算机系统）中相关章节，才恍然大悟，真正理解。
无符号数的编码 无符号数的二进制编码比较简单直观。假设一个整数数据类型有 $w$ 位，将位向量 $\vec{x}$ 写作 $[x_{w-1},x_{w-2},\ldots,x_0]$ ，用函数 $B2U_w$ (Binary to Unsigned)来表示：
$$B2U_w(\vec{x})=\sum_{i=0}^{w-1} x_i 2^i$$
函数$B2U_w$将一个长度位$w$位的 $0$、$1$ 串映射到非负整数。举个栗子：
$$B2U_4([0001])=0\cdot 2^3 + 0\cdot 2^2 + 0\cdot 2^1 + 1\cdot 2^0 = 0+0+0+1=\ 1$$ $$B2U_4([0101])=0\cdot 2^3 + 1\cdot 2^2 + 0\cdot 2^1 + 1\cdot 2^0 = 0+4+0+1=\ 5$$ $$B2U_4([1011])=1\cdot 2^3 + 0\cdot 2^2 + 1\cdot 2^1 + 1\cdot 2^0 = 8+0+2+1=11$$ $$B2U_4([1111])=1\cdot 2^3 + 1\cdot 2^2 + 1\cdot 2^1 + 1\cdot 2^0 = 8+4+2+1=15$$
$w$位所能表示的值的范围，最小值用位向量$[00\cdots 0]$表示，也就是整数值$0$，而最大值用位向量$[11\cdots 1]$表示，即整数值$UMax_w=\sum_{i=0}^{w-1} 2^i = 2^w-1$。
无符号数的二进制表示有一个很重要的属性，就是每个介于$0\sim 2^w -1$之间的数都有唯一一个$w$位的值编码。
补码编码 最常见的有符号数的计算机表示方式就是补码（two&amp;rsquo;s complement）形式。在这个定义中，将字的最高有效位解释为负权（negative weight）。用函数$B2T_w$(Binary to Two&amp;rsquo;s complement)来表示：
$$B2T_w(\vec{x})=-x_{w-1} 2^{w-1} + \sum_{i=0}^{w-2} x_i 2^i$$
最高有效位$x_{w-1}$也称为“符号位”，它的权重为$-2^{w-1}$，而在无符号数中，它的绝对值代表权重。符号位设置为$1$时，表示值为负，而当设置为$0$时，表示非负数。
$$B2T_4([0001])= -0 \cdot 2^3 + 0 \cdot 2^2 + 0 \cdot 2^1 + 1 \cdot 2^0 = \ 0+0+0+1=\ 1$$ $$B2T_4([0101])= -0 \cdot 2^3 + 1 \cdot 2^2 + 0 \cdot 2^1 + 1 \cdot 2^0 = \ 0+4+0+1=\ 5$$ $$B2T_4([1011])= -1 \cdot 2^3 + 0 \cdot 2^2 + 1 \cdot 2^1 + 1 \cdot 2^0 = - 8+0+2+1= -5$$ $$B2T_4([1111])= -1 \cdot 2^3 + 1 \cdot 2^2 + 1 \cdot 2^1 + 1 \cdot 2^0 = - 8+4+2+1= -1$$
$w$位所能表示的值的范围，最小值是$[10\cdots 0]$，即整数值$TMin_w=-2^{w-1}$；最大值是$[01\cdots 1]$，其整数值为$TMax_w=\sum_{i=0}^{w-2}=2^{w-1}-1$。
一些性质 $$|TMin|=|TMax|+1$$ $$UMax=2TMax+1$$</content></entry><entry><title>用OpenCV精准切割视频</title><url>/posts/2018-05-20-opencv-ffmpeg/</url><categories/><tags><tag>Python</tag><tag>ffmpeg</tag><tag>opencv</tag><tag>视频处理]</tag></tags><content type="html"><![CDATA[  拯救强迫症
ffmpeg 切割视频 使用 ffmpeg 直接切割视频的命令
ffmpeg -i test.mp4 -ss 00:00:00 -t 00:00:30 -c:v copy -c:a copy output.mp4 或者
ffmpeg -i test.mp4 -ss 00:00:00 -to 00:00:30 -c:v copy -c:a copy output.mp4 其中
-i 指定输入文件 -ss 指定开始时间 -to 指定结束时间 -t 指定需要截取的时长 上述命令将从视频开头截取一段 30s 的视频。但是，如果截取的开始时间和结束时间不是关键帧，那么得到的视频开头画面通常会卡住，而声音是正常的。这时候可以对视频流进行重编码，命令如下：
ffmpeg -ss 00:00:00 -to 00:00:30 -i test.mp4 -c:v h264 -c:a copy output.mp4 上述方法基本上可以满足大部分人的需求，时间精确到了秒。对于强迫症来说可能还不够准确，需要精确到帧。
OpenCV 精准切割视频 首先，使用 ffmpeg 粗略的切割视频
ffmpeg -ss START -to END -i INPUT -c:v copy -c:a copy cut.mp4 这里 START 建议设置在目标开始时间前几秒，END 设置在目标结束时间后几秒，以保证待截取的所有视频帧都包含在输出文件内。
接下来使用 Python+OpenCV 库实现以帧为单位的精准切割视频。首先将 cut.mp4 逐帧保存为图片，这里可以使用 OpenCV 或者 ffmpeg 生成（在当前目录下新建一个frames文件夹，否则无法保存）：
ffmpeg -i cut.mp4 frames/frames_%05d.jpg 或者使用 OpenCV
from __future__ import absolute_import from __future__ import division from __future__ import print_function import cv2 cap = cv2.VideoCapture(&#39;cut.mp4&#39;) success, image = cap.read() count = 0 success = True while success: ## save frame as JPEG file cv2.imwrite(&#34;frames/frame%d.jpg&#34; % count, image) success, image = cap.read() print(&#39;Read a new frame: &#39;, count) count += 1 在 frames 文件夹下，我们可以看到视频帧都转换成了图像文件。接下来，找出需要截取的视频开始帧和结束帧对应的文件，并记下编号（下一步用到）。
from __future__ import absolute_import from __future__ import division from __future__ import print_function import cv2 cap = cv2.VideoCapture(&#39;cut.mp4&#39;) outpath = &#39;cut_1.mp4&#39; start_frame = 372 ## 开始帧 end_frame = 1230 ## 结束帧 ## 获取视频分辨率 size = (int(cap.get(cv2.CAP_PROP_FRAME_WIDTH)), int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))) ## 输出文件编码，Linux下可选X264 fourcc = cv2.VideoWriter_fourcc(*&#39;MJPG&#39;) ## 视频帧率 fps = cap.get(cv2.CAP_PROP_FPS) success, image = cap.read() count = 0 success = True ## 从视频开头获取每一帧，直到到达开始帧 while success: success, image = cap.read() count += 1 if (count==start_frame): success = False ## 开始帧的时间(单位ms)，相当于ffmpeg的ss参数 ss = int(cap.get(cv2.CAP_PROP_POS_MSEC)) ## 输出 out = cv2.VideoWriter(outpath, fourcc, fps, size) ## 读取开始帧到结束帧的每一帧并写入新视频 while (count&lt;end_frame): success, image = cap.read() out.write(image) count+=1 ## 结束帧的时间，相对于ffmpeg的to参数 to = int(cap.get(cv2.CAP_PROP_POS_MSEC)) print(ss, to) cap.release() out.release() 以上程序将生产一个精确到帧的视频文件，但是没有声音，而 ffmpeg 在分割音频的时候是很精确的。接下来将用 ffmpeg 来切割音频，并和上述视频合并。
ffmpeg 切割音频并合并视频 ffmpeg -i cut_1.mp4 -i cut.mp4 -ss TIME_OFF -to TIME_STOP -c copy output.mkv 这里TIME_OFF和TIME_STOP与前一节的ss和to相对应，但是 ffmpeg 里面时间单位是 s，因此应先除以1000。
  ]]></content></entry><entry><title>Ubuntu个人文件夹中文改英文</title><url>/posts/2018-04-23-ubuntu-home-folder/</url><categories/><tags><tag>Linux</tag><tag>命令行</tag></tags><content type="html"> 背景 选择中文安装好的 Ubuntu 系统主文件夹下的文件夹是中文的，例如桌面、下载、图片等，在终端下想要切换到这些文件夹就有点麻烦。
虽然 Unity 桌面环境可以通过切换系统语言来改名，但是 Mate 等桌面环境下就没这么“方便”。
命令行解决 打开终端，在终端中输入命令:
export LANG=en_US xdg-user-dirs-gtk-update 跳出对话框询问是否将目录转化为英文路径，同意并关闭。 在终端中输入命令:
export LANG=zh_CN 关闭终端并重启，OK。</content></entry><entry><title>PyPI镜像设置</title><url>/posts/2018-04-01-pip/</url><categories/><tags><tag>Python</tag><tag>折腾</tag></tags><content type="html"> 由于众所周知的原因，PyPI 官网的访问速度可能不佳。
旧版本 pip（&amp;lt;10） 编辑 pip 配置文件，将 index-url 修改为（中科大源）
https://mirrors.ustc.edu.cn/pypi/web/simple 或（清华源）
https://pypi.tuna.tsinghua.edu.cn/simple pip 的配置文件一般位于（如果没有，则直接创建）：
（类）Unix 环境: $HOME/.config/pip/pip.conf macOS: $HOME/Library/Application Support/pip/pip.conf Windows: %APPDATA%\pip\pip.ini 全局或者 virtualenv 等的 pip 配置文件位置，请参考 https://pip.pypa.io/en/stable/user_guide/#configuration pip.conf 文件配置示例如下：
[global] index-url = https://mirrors.ustc.edu.cn/pypi/web/simple format = columns 新版本 (&amp;gt;=10.0.0) 设置为清华源
pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple 或者中科大源
pip config set global.index-url https://mirrors.ustc.edu.cn/pypi/web/simple TUNA 也可使用清华大学开源软件镜像站的“一键使用TUNA”服务，又名 oh-my-tuna。它目前支持更改下列软件的配置，将其直接指向 TUNA 镜像站：
Anaconda Arch Linux TeX Live (by tlmgr) Debian GNU/Linux Homebrew PyPI Ubuntu Linux 使用方法如下：
wget https://tuna.moe/oh-my-tuna/oh-my-tuna.py # For yourself python oh-my-tuna.py # ...or for everyone! sudo python oh-my-tuna.py --global # Get some help python oh-my-tuna.py -h 参考：
PyPI 镜像源使用帮助 TUNA 主页</content></entry></search>